"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { CheckCircle2, CreditCard, Wallet, Copy, Shield, Info, RefreshCw, AlertTriangle, Coins, Zap } from "lucide-react"
import { createClient } from "@/lib/supabase/client"
import { useToast } from "@/hooks/use-toast"
import { WalletExportModal } from "@/components/wallet-export-modal"

interface WalletManagementProps {
  profile: any
}

export function WalletManagement({ profile }: WalletManagementProps) {
  const [isAutoGenerated, setIsAutoGenerated] = useState(false)
  const [isCreatingWallet, setIsCreatingWallet] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [copiedAddress, setCopiedAddress] = useState(false)
  const [needsMigration, setNeedsMigration] = useState(false)
  const [isEncrypted, setIsEncrypted] = useState(false)
  const [walletBalances, setWalletBalances] = useState<{
    eth: string
    unitick: string
    isLoading: boolean
  }>({
    eth: "0",
    unitick: "0",
    isLoading: true
  })
  const supabase = createClient()
  const { toast } = useToast()

  useEffect(() => {
    checkWalletStatus()
    if (profile?.wallet_address) {
      fetchWalletBalances()
    }
  }, [profile])

  const fetchWalletBalances = async () => {
    if (!profile?.wallet_address) return

    setWalletBalances(prev => ({ ...prev, isLoading: true }))
    
    try {
      // Fetch ETH balance
      const ethResponse = await fetch(`/api/wallet/balance?address=${profile.wallet_address}&token=ETH`)
      const ethData = await ethResponse.json()
      
      // Fetch UniTick balance
      const unitickResponse = await fetch(`/api/wallet/balance?address=${profile.wallet_address}&token=UNITICK`)
      const unitickData = await unitickResponse.json()
      
      setWalletBalances({
        eth: ethData.success ? ethData.balance : "0.000000",
        unitick: unitickData.success ? unitickData.balance : "0.00",
        isLoading: false
      })
    } catch (error) {
      console.error('[Wallet] Error fetching balances:', error)
      setWalletBalances({
        eth: "0.000000",
        unitick: "0.00",
        isLoading: false
      })
    }
  }

  const copyAddressToClipboard = async () => {
    if (!profile?.wallet_address) return

    try {
      await navigator.clipboard.writeText(profile.wallet_address)
      setCopiedAddress(true)
      toast({
        title: "Address Copied",
        description: "Wallet address copied to clipboard",
      })
      setTimeout(() => setCopiedAddress(false), 2000)
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy address to clipboard",
        variant: "destructive",
      })
    }
  }

  const checkWalletStatus = async () => {
    if (!profile?.wallet_address) {
      setIsLoading(false)
      return
    }

    // If wallet exists, fetch balances
    await fetchWalletBalances()
    setIsLoading(false)
  }

  const createWalletForUser = async () => {
    setIsCreatingWallet(true)
    
    try {
      // Get current user info
      const { data: { user } } = await supabase.auth.getUser()
      if (!user) {
        throw new Error('User not authenticated')
      }

      // Use the new secure wallet creation API
      const response = await fetch('/api/wallet/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user.id,
          email: user.email
        })
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to create wallet')
      }

      if (result.success) {
        toast({
          title: "Wallet Created",
          description: "Your secure wallet has been created successfully!",
        })

        // Reload page to get updated wallet information
        window.location.reload()
      }
    } catch (error) {
      console.error('[Wallet] Error creating wallet:', error)
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create wallet",
        variant: "destructive",
      })
    } finally {
      setIsCreatingWallet(false)
    }
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wallet className="h-5 w-5" />
            Wallet Management
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse">
            <div className="h-4 bg-muted rounded w-3/4 mb-2" />
            <div className="h-4 bg-muted rounded w-1/2" />
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Wallet className="h-5 w-5" />
          Wallet Management
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {!profile?.wallet_address ? (
          <div className="text-center py-6 space-y-4">
            <div className="bg-gradient-to-br from-background via-background to-accent/5 border border-border/50 rounded-lg p-6">
              <div className="flex flex-col items-center gap-4">
                <div className="w-16 h-16 rounded-full bg-gradient-to-br from-primary to-primary/60 flex items-center justify-center">
                  <Wallet className="h-8 w-8 text-white" />
                </div>
                <div className="text-center space-y-2">
                  <h4 className="font-semibold text-lg text-foreground">
                    Setup Your Wallet
                  </h4>
                  <p className="text-sm text-muted-foreground max-w-md mx-auto">
                    Create your secure crypto wallet to start making payments and receiving funds. 
                    This takes just a few seconds and is completely free.
                  </p>
                </div>
                <Button 
                  onClick={createWalletForUser}
                  disabled={isCreatingWallet}
                  size="lg"
                  className="w-full sm:w-auto min-w-[200px]"
                >
                  {isCreatingWallet ? (
                    <span className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                      Creating Wallet...
                    </span>
                  ) : (
                    <span className="flex items-center gap-2">
                      <Wallet className="h-5 w-5" />
                      Create My Wallet
                    </span>
                  )}
                </Button>
              </div>
            </div>
            
            <div className="space-y-2 text-sm text-muted-foreground">
              <div className="flex items-center gap-2">
                <Shield className="h-4 w-4 text-green-500" />
                <span>Your private keys are encrypted and secure</span>
              </div>
              <div className="flex items-center gap-2">
                <Zap className="h-4 w-4 text-blue-500" />
                <span>Ready to use in seconds</span>
              </div>
              <div className="flex items-center gap-2">
                <Coins className="h-4 w-4 text-yellow-500" />
                <span>Supports ETH, USDC, and UniTick tokens</span>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Wallet Address */}
            <div className="bg-muted p-4 rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <span className="text-sm font-medium flex items-center gap-2">
                  <Wallet className="h-4 w-4" />
                  Wallet Address
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={copyAddressToClipboard}
                  className="h-8"
                >
                  {copiedAddress ? (
                    <>
                      <CheckCircle2 className="h-3 w-3 mr-1" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="h-3 w-3 mr-1" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
              <p className="text-sm font-mono break-all text-muted-foreground">
                {profile.wallet_address}
              </p>
            </div>

            {/* Wallet Balances */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-muted p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Coins className="h-4 w-4 text-blue-500" />
                  <span className="text-sm font-medium">ETH Balance</span>
                </div>
                <p className="text-lg font-mono">
                  {walletBalances.isLoading ? (
                    <span className="inline-block h-6 bg-muted-foreground/20 rounded animate-pulse w-20" />
                  ) : (
                    `${walletBalances.eth} ETH`
                  )}
                </p>
              </div>
              
              <div className="bg-muted p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <CreditCard className="h-4 w-4 text-green-500" />
                  <span className="text-sm font-medium">UniTick Balance</span>
                </div>
                <p className="text-lg font-mono">
                  {walletBalances.isLoading ? (
                    <span className="inline-block h-6 bg-muted-foreground/20 rounded animate-pulse w-20" />
                  ) : (
                    `${walletBalances.unitick} UTK`
                  )}
                </p>
              </div>
            </div>

            {/* Wallet Actions */}
            <div className="flex flex-col sm:flex-row gap-2">
              <WalletExportModal 
                walletAddress={profile.wallet_address}
                trigger={
                  <Button className="flex-1">
                    <Copy className="h-4 w-4 mr-2" />
                    Export Wallet
                  </Button>
                }
              />
            </div>

            {/* Security Status */}
            <div className="space-y-2">
              <Alert>
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  <strong>Your Wallet:</strong> You own and control this wallet. UniTick only provides the interface.
                </AlertDescription>
              </Alert>
              
              <div className="text-sm text-muted-foreground space-y-1">
                <p><strong>Send Funds:</strong> Use the address above to receive ETH, USDC, or other tokens.</p>
                <p><strong>Export Anytime:</strong> Export to MetaMask, Coinbase Wallet, or any external wallet.</p>
                <p><strong>Security:</strong> Private keys are encrypted and only accessible through your account.</p>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}